** It comes when related databases are in different databases owned by different services, thus the application
    cannot simply use a local ACID transaction.

** It solved the problem "How to implement db transactions that span services?"
** It strikes as 2PC is not an option
** A saga is a sequence of local transactions.
** Each local transaction updates the database and publishes a message or event to trigger the next local transaction
    in the saga.
** If a local transaction fails because it violates a business rule then the saga executes a series of compensating
    transactions that undo the changes that were made by the preceding local transactions.
** There are two ways of coordination sagas:
    - Choreography - each local transaction publishes domain events that trigger local transactions in other services.
    - Orchestration - an orchestrator (object) tells the participants what local transactions to execute.

Pros:
    - It enables data consistencies throughout services
Cons:
    - Programming model is complex

References:
1. https://microservices.io/patterns/data/saga.html